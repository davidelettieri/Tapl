//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Tapl.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class TaplParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, BIND=3, VAR=4, LAMBDA=5, DOT=6;
	public const int
		RULE_program = 0, RULE_bind = 1, RULE_term = 2;
	public static readonly string[] ruleNames = {
		"program", "bind", "term"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'BIND'", null, "'\\'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "BIND", "VAR", "LAMBDA", "DOT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tapl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TaplParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TaplParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TaplParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public BindContext[] bind() {
			return GetRuleContexts<BindContext>();
		}
		public BindContext bind(int i) {
			return GetRuleContext<BindContext>(i);
		}
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << BIND) | (1L << VAR) | (1L << LAMBDA))) != 0)) {
				{
				State = 8;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BIND:
					{
					State = 6; bind();
					}
					break;
				case T__0:
				case VAR:
				case LAMBDA:
					{
					State = 7; term(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 12;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindContext : ParserRuleContext {
		public ITerminalNode BIND() { return GetToken(TaplParser.BIND, 0); }
		public ITerminalNode VAR() { return GetToken(TaplParser.VAR, 0); }
		public BindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindContext bind() {
		BindContext _localctx = new BindContext(Context, State);
		EnterRule(_localctx, 2, RULE_bind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13; Match(BIND);
			State = 14; Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParContext : TermContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ParContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AppContext : TermContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public AppContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbsContext : TermContext {
		public ITerminalNode LAMBDA() { return GetToken(TaplParser.LAMBDA, 0); }
		public ITerminalNode VAR() { return GetToken(TaplParser.VAR, 0); }
		public ITerminalNode DOT() { return GetToken(TaplParser.DOT, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public AbsContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarContext : TermContext {
		public ITerminalNode VAR() { return GetToken(TaplParser.VAR, 0); }
		public VarContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				_localctx = new ParContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 17; Match(T__0);
				State = 18; term(0);
				State = 19; Match(T__1);
				}
				break;
			case VAR:
				{
				_localctx = new VarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 21; Match(VAR);
				}
				break;
			case LAMBDA:
				{
				_localctx = new AbsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 22; Match(LAMBDA);
				State = 23; Match(VAR);
				State = 24; Match(DOT);
				State = 25; term(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 32;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AppContext(new TermContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 28;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 29; term(3);
					}
					} 
				}
				State = 34;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\b', '&', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'\v', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xE', '\v', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x1D', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '!', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '$', '\v', '\x4', '\x3', '\x4', '\x2', '\x3', '\x6', '\x5', 
		'\x2', '\x4', '\x6', '\x2', '\x2', '\x2', '\'', '\x2', '\f', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\xF', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\v', '\x5', '\x4', '\x3', '\x2', '\t', 
		'\v', '\x5', '\x6', '\x4', '\x2', '\n', '\b', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\t', '\x3', '\x2', '\x2', '\x2', '\v', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\n', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\r', '\x3', '\x3', '\x2', '\x2', '\x2', '\xE', '\f', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x10', '\a', '\x5', '\x2', '\x2', '\x10', 
		'\x11', '\a', '\x6', '\x2', '\x2', '\x11', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x13', '\b', '\x4', '\x1', '\x2', '\x13', '\x14', '\a', 
		'\x3', '\x2', '\x2', '\x14', '\x15', '\x5', '\x6', '\x4', '\x2', '\x15', 
		'\x16', '\a', '\x4', '\x2', '\x2', '\x16', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x1D', '\a', '\x6', '\x2', '\x2', '\x18', '\x19', '\a', 
		'\a', '\x2', '\x2', '\x19', '\x1A', '\a', '\x6', '\x2', '\x2', '\x1A', 
		'\x1B', '\a', '\b', '\x2', '\x2', '\x1B', '\x1D', '\x5', '\x6', '\x4', 
		'\x3', '\x1C', '\x12', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\"', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\f', '\x4', '\x2', 
		'\x2', '\x1F', '!', '\x5', '\x6', '\x4', '\x5', ' ', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', '!', '$', '\x3', '\x2', '\x2', '\x2', '\"', ' ', '\x3', 
		'\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '\a', 
		'\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\n', '\f', '\x1C', '\"',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
