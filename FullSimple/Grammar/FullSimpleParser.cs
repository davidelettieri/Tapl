//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FullSimple.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class FullSimpleParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TYPE=1, INERT=2, IF=3, THEN=4, ELSE=5, TRUE=6, FALSE=7, BOOL=8, CASE=9, 
		OF=10, AS=11, LAMBDA=12, LET=13, IN=14, FIX=15, LETREC=16, USTRING=17, 
		UNIT=18, UUNIT=19, TIMESFLOAT=20, UFLOAT=21, SUCC=22, PRED=23, ISZERO=24, 
		NAT=25, STRINGV=26, USCORE=27, APOSTROPHE=28, DQUOTE=29, BANG=30, HASH=31, 
		TRIANGLE=32, STAR=33, VBAR=34, DOT=35, SEMI=36, COMMA=37, SLASH=38, COLON=39, 
		COLONCOLON=40, EQ=41, EQEQ=42, LSQUARE=43, LT=44, LCURLY=45, LPAREN=46, 
		LEFTARROW=47, LCURLYBAR=48, LSQUAREBAR=49, RCURLY=50, RPAREN=51, RSQUARE=52, 
		GT=53, BARRCURLY=54, BARGT=55, BARRSQUARE=56, COLONEQ=57, ARROW=58, DARROW=59, 
		DDARROW=60, FLOATV=61, INTV=62, UCID=63, LCID=64, WS=65, NL=66, NL1=67;
	public const int
		RULE_toplevel = 0, RULE_command = 1, RULE_binder = 2, RULE_type = 3, RULE_atype = 4, 
		RULE_tybinder = 5, RULE_fieldtypes = 6, RULE_nefieldtypes = 7, RULE_fieldtype = 8, 
		RULE_arrowtype = 9, RULE_term = 10, RULE_appterm = 11, RULE_ascribeterm = 12, 
		RULE_pathterm = 13, RULE_termseq = 14, RULE_aterm = 15, RULE_cases = 16, 
		RULE_case = 17, RULE_fields = 18, RULE_nefields = 19, RULE_field = 20;
	public static readonly string[] ruleNames = {
		"toplevel", "command", "binder", "type", "atype", "tybinder", "fieldtypes", 
		"nefieldtypes", "fieldtype", "arrowtype", "term", "appterm", "ascribeterm", 
		"pathterm", "termseq", "aterm", "cases", "case", "fields", "nefields", 
		"field"
	};

	private static readonly string[] _LiteralNames = {
		null, "'type'", "'inert'", "'if'", "'then'", "'else'", "'true'", "'false'", 
		"'Bool'", "'case'", "'of'", "'as'", "'lambda'", "'let'", "'in'", "'fix'", 
		"'letrec'", "'String'", "'unit'", "'Unit'", "'timesfloat'", "'Float'", 
		"'succ'", "'pred'", "'iszero'", "'Nat'", null, "'_'", "'''", "'\"'", "'!'", 
		"'#'", "'$'", "'*'", "'|'", "'.'", "';'", "','", "'/'", "':'", "'::'", 
		"'='", "'=='", "'['", "'<'", "'{'", "'('", "'<-'", "'{|'", "'[|'", "'}'", 
		"')'", "']'", "'>'", "'|}'", "'|>'", "'|]'", "':='", "'->'", "'=>'", "'==>'", 
		null, null, null, null, "' '", "'\r'", "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TYPE", "INERT", "IF", "THEN", "ELSE", "TRUE", "FALSE", "BOOL", 
		"CASE", "OF", "AS", "LAMBDA", "LET", "IN", "FIX", "LETREC", "USTRING", 
		"UNIT", "UUNIT", "TIMESFLOAT", "UFLOAT", "SUCC", "PRED", "ISZERO", "NAT", 
		"STRINGV", "USCORE", "APOSTROPHE", "DQUOTE", "BANG", "HASH", "TRIANGLE", 
		"STAR", "VBAR", "DOT", "SEMI", "COMMA", "SLASH", "COLON", "COLONCOLON", 
		"EQ", "EQEQ", "LSQUARE", "LT", "LCURLY", "LPAREN", "LEFTARROW", "LCURLYBAR", 
		"LSQUAREBAR", "RCURLY", "RPAREN", "RSQUARE", "GT", "BARRCURLY", "BARGT", 
		"BARRSQUARE", "COLONEQ", "ARROW", "DARROW", "DDARROW", "FLOATV", "INTV", 
		"UCID", "LCID", "WS", "NL", "NL1"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FullSimple.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FullSimpleParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FullSimpleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FullSimpleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ToplevelContext : ParserRuleContext {
		public ToplevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toplevel; } }
	 
		public ToplevelContext() { }
		public virtual void CopyFrom(ToplevelContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Toplevel_commandContext : ToplevelContext {
		public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(FullSimpleParser.SEMI, 0); }
		public ToplevelContext toplevel() {
			return GetRuleContext<ToplevelContext>(0);
		}
		public Toplevel_commandContext(ToplevelContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToplevel_command(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Toplevel_eofContext : ToplevelContext {
		public ITerminalNode Eof() { return GetToken(FullSimpleParser.Eof, 0); }
		public Toplevel_eofContext(ToplevelContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToplevel_eof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToplevelContext toplevel() {
		ToplevelContext _localctx = new ToplevelContext(Context, State);
		EnterRule(_localctx, 0, RULE_toplevel);
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INERT:
			case IF:
			case TRUE:
			case FALSE:
			case CASE:
			case LAMBDA:
			case LET:
			case FIX:
			case LETREC:
			case UNIT:
			case TIMESFLOAT:
			case SUCC:
			case PRED:
			case ISZERO:
			case STRINGV:
			case LT:
			case LCURLY:
			case LPAREN:
			case FLOATV:
			case INTV:
			case UCID:
			case LCID:
				_localctx = new Toplevel_commandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 42; command();
				State = 43; Match(SEMI);
				State = 44; toplevel();
				}
				break;
			case Eof:
				_localctx = new Toplevel_eofContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 46; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	 
		public CommandContext() { }
		public virtual void CopyFrom(CommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Command_binderContext : CommandContext {
		public ITerminalNode LCID() { return GetToken(FullSimpleParser.LCID, 0); }
		public BinderContext binder() {
			return GetRuleContext<BinderContext>(0);
		}
		public Command_binderContext(CommandContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_binder(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Command_termContext : CommandContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Command_termContext(CommandContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_term(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Command_tybinderContext : CommandContext {
		public ITerminalNode UCID() { return GetToken(FullSimpleParser.UCID, 0); }
		public TybinderContext tybinder() {
			return GetRuleContext<TybinderContext>(0);
		}
		public Command_tybinderContext(CommandContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_tybinder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 2, RULE_command);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new Command_termContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 49; term();
				}
				break;
			case 2:
				_localctx = new Command_tybinderContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 50; Match(UCID);
				State = 51; tybinder();
				}
				break;
			case 3:
				_localctx = new Command_binderContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 52; Match(LCID);
				State = 53; binder();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinderContext : ParserRuleContext {
		public BinderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binder; } }
	 
		public BinderContext() { }
		public virtual void CopyFrom(BinderContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Binder_termContext : BinderContext {
		public ITerminalNode EQ() { return GetToken(FullSimpleParser.EQ, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Binder_termContext(BinderContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinder_term(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Binder_typeContext : BinderContext {
		public ITerminalNode COLON() { return GetToken(FullSimpleParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Binder_typeContext(BinderContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinder_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinderContext binder() {
		BinderContext _localctx = new BinderContext(Context, State);
		EnterRule(_localctx, 4, RULE_binder);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				_localctx = new Binder_typeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; Match(COLON);
				State = 57; type();
				}
				break;
			case EQ:
				_localctx = new Binder_termContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; Match(EQ);
				State = 59; term();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Type_arrowtypeContext : TypeContext {
		public ArrowtypeContext arrowtype() {
			return GetRuleContext<ArrowtypeContext>(0);
		}
		public Type_arrowtypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_arrowtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_type);
		try {
			_localctx = new Type_arrowtypeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; arrowtype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtypeContext : ParserRuleContext {
		public AtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atype; } }
	 
		public AtypeContext() { }
		public virtual void CopyFrom(AtypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class At_natContext : AtypeContext {
		public ITerminalNode NAT() { return GetToken(FullSimpleParser.NAT, 0); }
		public At_natContext(AtypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAt_nat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class At_boolContext : AtypeContext {
		public ITerminalNode BOOL() { return GetToken(FullSimpleParser.BOOL, 0); }
		public At_boolContext(AtypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAt_bool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class At_recordContext : AtypeContext {
		public ITerminalNode LCURLY() { return GetToken(FullSimpleParser.LCURLY, 0); }
		public FieldtypesContext fieldtypes() {
			return GetRuleContext<FieldtypesContext>(0);
		}
		public ITerminalNode RCURLY() { return GetToken(FullSimpleParser.RCURLY, 0); }
		public At_recordContext(AtypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAt_record(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class At_ucidContext : AtypeContext {
		public ITerminalNode UCID() { return GetToken(FullSimpleParser.UCID, 0); }
		public At_ucidContext(AtypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAt_ucid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class At_uunitContext : AtypeContext {
		public ITerminalNode UUNIT() { return GetToken(FullSimpleParser.UUNIT, 0); }
		public At_uunitContext(AtypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAt_uunit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class At_typeContext : AtypeContext {
		public ITerminalNode LPAREN() { return GetToken(FullSimpleParser.LPAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(FullSimpleParser.RPAREN, 0); }
		public At_typeContext(AtypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAt_type(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class At_variantContext : AtypeContext {
		public ITerminalNode LT() { return GetToken(FullSimpleParser.LT, 0); }
		public FieldtypesContext fieldtypes() {
			return GetRuleContext<FieldtypesContext>(0);
		}
		public ITerminalNode GT() { return GetToken(FullSimpleParser.GT, 0); }
		public At_variantContext(AtypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAt_variant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class At_ustringContext : AtypeContext {
		public ITerminalNode USTRING() { return GetToken(FullSimpleParser.USTRING, 0); }
		public At_ustringContext(AtypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAt_ustring(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class At_ufloatContext : AtypeContext {
		public ITerminalNode UFLOAT() { return GetToken(FullSimpleParser.UFLOAT, 0); }
		public At_ufloatContext(AtypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAt_ufloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtypeContext atype() {
		AtypeContext _localctx = new AtypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_atype);
		try {
			State = 82;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				_localctx = new At_typeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; Match(LPAREN);
				State = 65; type();
				State = 66; Match(RPAREN);
				}
				break;
			case UCID:
				_localctx = new At_ucidContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 68; Match(UCID);
				}
				break;
			case BOOL:
				_localctx = new At_boolContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 69; Match(BOOL);
				}
				break;
			case LT:
				_localctx = new At_variantContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 70; Match(LT);
				State = 71; fieldtypes();
				State = 72; Match(GT);
				}
				break;
			case USTRING:
				_localctx = new At_ustringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 74; Match(USTRING);
				}
				break;
			case UUNIT:
				_localctx = new At_uunitContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 75; Match(UUNIT);
				}
				break;
			case LCURLY:
				_localctx = new At_recordContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 76; Match(LCURLY);
				State = 77; fieldtypes();
				State = 78; Match(RCURLY);
				}
				break;
			case UFLOAT:
				_localctx = new At_ufloatContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 80; Match(UFLOAT);
				}
				break;
			case NAT:
				_localctx = new At_natContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 81; Match(NAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TybinderContext : ParserRuleContext {
		public TybinderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tybinder; } }
	 
		public TybinderContext() { }
		public virtual void CopyFrom(TybinderContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Tybinder_typeContext : TybinderContext {
		public ITerminalNode EQ() { return GetToken(FullSimpleParser.EQ, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Tybinder_typeContext(TybinderContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTybinder_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TybinderContext tybinder() {
		TybinderContext _localctx = new TybinderContext(Context, State);
		EnterRule(_localctx, 10, RULE_tybinder);
		try {
			_localctx = new Tybinder_typeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(EQ);
			State = 85; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldtypesContext : ParserRuleContext {
		public FieldtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldtypes; } }
	 
		public FieldtypesContext() { }
		public virtual void CopyFrom(FieldtypesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Fieldtypes_nefieldtypesContext : FieldtypesContext {
		public NefieldtypesContext nefieldtypes() {
			return GetRuleContext<NefieldtypesContext>(0);
		}
		public Fieldtypes_nefieldtypesContext(FieldtypesContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldtypes_nefieldtypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldtypesContext fieldtypes() {
		FieldtypesContext _localctx = new FieldtypesContext(Context, State);
		EnterRule(_localctx, 12, RULE_fieldtypes);
		try {
			_localctx = new Fieldtypes_nefieldtypesContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; nefieldtypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NefieldtypesContext : ParserRuleContext {
		public NefieldtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nefieldtypes; } }
	 
		public NefieldtypesContext() { }
		public virtual void CopyFrom(NefieldtypesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Nefieldtypes_fieldtypeContext : NefieldtypesContext {
		public FieldtypeContext fieldtype() {
			return GetRuleContext<FieldtypeContext>(0);
		}
		public Nefieldtypes_fieldtypeContext(NefieldtypesContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNefieldtypes_fieldtype(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Nefieldtypes_nefieldtypeContext : NefieldtypesContext {
		public FieldtypeContext fieldtype() {
			return GetRuleContext<FieldtypeContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(FullSimpleParser.COMMA, 0); }
		public NefieldtypesContext nefieldtypes() {
			return GetRuleContext<NefieldtypesContext>(0);
		}
		public Nefieldtypes_nefieldtypeContext(NefieldtypesContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNefieldtypes_nefieldtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NefieldtypesContext nefieldtypes() {
		NefieldtypesContext _localctx = new NefieldtypesContext(Context, State);
		EnterRule(_localctx, 14, RULE_nefieldtypes);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new Nefieldtypes_fieldtypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 89; fieldtype();
				}
				break;
			case 2:
				_localctx = new Nefieldtypes_nefieldtypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 90; fieldtype();
				State = 91; Match(COMMA);
				State = 92; nefieldtypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldtypeContext : ParserRuleContext {
		public FieldtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldtype; } }
	 
		public FieldtypeContext() { }
		public virtual void CopyFrom(FieldtypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Fieldtype_lcidContext : FieldtypeContext {
		public ITerminalNode LCID() { return GetToken(FullSimpleParser.LCID, 0); }
		public ITerminalNode COLON() { return GetToken(FullSimpleParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Fieldtype_lcidContext(FieldtypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldtype_lcid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Fieldtype_typeContext : FieldtypeContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Fieldtype_typeContext(FieldtypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldtype_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldtypeContext fieldtype() {
		FieldtypeContext _localctx = new FieldtypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_fieldtype);
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCID:
				_localctx = new Fieldtype_lcidContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 96; Match(LCID);
				State = 97; Match(COLON);
				State = 98; type();
				}
				break;
			case BOOL:
			case USTRING:
			case UUNIT:
			case UFLOAT:
			case NAT:
			case LT:
			case LCURLY:
			case LPAREN:
			case UCID:
				_localctx = new Fieldtype_typeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 99; type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowtypeContext : ParserRuleContext {
		public ArrowtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowtype; } }
	 
		public ArrowtypeContext() { }
		public virtual void CopyFrom(ArrowtypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Arrowtype_atypeContext : ArrowtypeContext {
		public AtypeContext atype() {
			return GetRuleContext<AtypeContext>(0);
		}
		public Arrowtype_atypeContext(ArrowtypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowtype_atype(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Arrowtype_arrowContext : ArrowtypeContext {
		public AtypeContext atype() {
			return GetRuleContext<AtypeContext>(0);
		}
		public ITerminalNode ARROW() { return GetToken(FullSimpleParser.ARROW, 0); }
		public ArrowtypeContext arrowtype() {
			return GetRuleContext<ArrowtypeContext>(0);
		}
		public Arrowtype_arrowContext(ArrowtypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowtype_arrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowtypeContext arrowtype() {
		ArrowtypeContext _localctx = new ArrowtypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_arrowtype);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new Arrowtype_arrowContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 102; atype();
				State = 103; Match(ARROW);
				State = 104; arrowtype();
				}
				break;
			case 2:
				_localctx = new Arrowtype_atypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 106; atype();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Term_lucContext : TermContext {
		public ITerminalNode LAMBDA() { return GetToken(FullSimpleParser.LAMBDA, 0); }
		public ITerminalNode USCORE() { return GetToken(FullSimpleParser.USCORE, 0); }
		public ITerminalNode COLON() { return GetToken(FullSimpleParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(FullSimpleParser.DOT, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Term_lucContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm_luc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Term_apptermContext : TermContext {
		public ApptermContext appterm() {
			return GetRuleContext<ApptermContext>(0);
		}
		public Term_apptermContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm_appterm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Term_iftContext : TermContext {
		public ITerminalNode IF() { return GetToken(FullSimpleParser.IF, 0); }
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(FullSimpleParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(FullSimpleParser.ELSE, 0); }
		public Term_iftContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm_ift(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Term_llContext : TermContext {
		public ITerminalNode LET() { return GetToken(FullSimpleParser.LET, 0); }
		public ITerminalNode LCID() { return GetToken(FullSimpleParser.LCID, 0); }
		public ITerminalNode EQ() { return GetToken(FullSimpleParser.EQ, 0); }
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode IN() { return GetToken(FullSimpleParser.IN, 0); }
		public Term_llContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm_ll(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Term_luContext : TermContext {
		public ITerminalNode LET() { return GetToken(FullSimpleParser.LET, 0); }
		public ITerminalNode USCORE() { return GetToken(FullSimpleParser.USCORE, 0); }
		public ITerminalNode EQ() { return GetToken(FullSimpleParser.EQ, 0); }
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode IN() { return GetToken(FullSimpleParser.IN, 0); }
		public Term_luContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm_lu(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Term_caseOfContext : TermContext {
		public ITerminalNode CASE() { return GetToken(FullSimpleParser.CASE, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode OF() { return GetToken(FullSimpleParser.OF, 0); }
		public CasesContext cases() {
			return GetRuleContext<CasesContext>(0);
		}
		public Term_caseOfContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm_caseOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Term_letrecContext : TermContext {
		public ITerminalNode LETREC() { return GetToken(FullSimpleParser.LETREC, 0); }
		public ITerminalNode LCID() { return GetToken(FullSimpleParser.LCID, 0); }
		public ITerminalNode COLON() { return GetToken(FullSimpleParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(FullSimpleParser.EQ, 0); }
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode IN() { return GetToken(FullSimpleParser.IN, 0); }
		public Term_letrecContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm_letrec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Term_llcidContext : TermContext {
		public ITerminalNode LAMBDA() { return GetToken(FullSimpleParser.LAMBDA, 0); }
		public ITerminalNode LCID() { return GetToken(FullSimpleParser.LCID, 0); }
		public ITerminalNode COLON() { return GetToken(FullSimpleParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(FullSimpleParser.DOT, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Term_llcidContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm_llcid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 20, RULE_term);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new Term_apptermContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 109; appterm(0);
				}
				break;
			case 2:
				_localctx = new Term_iftContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 110; Match(IF);
				State = 111; term();
				State = 112; Match(THEN);
				State = 113; term();
				State = 114; Match(ELSE);
				State = 115; term();
				}
				break;
			case 3:
				_localctx = new Term_caseOfContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 117; Match(CASE);
				State = 118; term();
				State = 119; Match(OF);
				State = 120; cases();
				}
				break;
			case 4:
				_localctx = new Term_llcidContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 122; Match(LAMBDA);
				State = 123; Match(LCID);
				State = 124; Match(COLON);
				State = 125; type();
				State = 126; Match(DOT);
				State = 127; term();
				}
				break;
			case 5:
				_localctx = new Term_lucContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 129; Match(LAMBDA);
				State = 130; Match(USCORE);
				State = 131; Match(COLON);
				State = 132; type();
				State = 133; Match(DOT);
				State = 134; term();
				}
				break;
			case 6:
				_localctx = new Term_llContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 136; Match(LET);
				State = 137; Match(LCID);
				State = 138; Match(EQ);
				State = 139; term();
				State = 140; Match(IN);
				State = 141; term();
				}
				break;
			case 7:
				_localctx = new Term_luContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 143; Match(LET);
				State = 144; Match(USCORE);
				State = 145; Match(EQ);
				State = 146; term();
				State = 147; Match(IN);
				State = 148; term();
				}
				break;
			case 8:
				_localctx = new Term_letrecContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 150; Match(LETREC);
				State = 151; Match(LCID);
				State = 152; Match(COLON);
				State = 153; type();
				State = 154; Match(EQ);
				State = 155; term();
				State = 156; Match(IN);
				State = 157; term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ApptermContext : ParserRuleContext {
		public ApptermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appterm; } }
	 
		public ApptermContext() { }
		public virtual void CopyFrom(ApptermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Appterm_timesContext : ApptermContext {
		public ITerminalNode TIMESFLOAT() { return GetToken(FullSimpleParser.TIMESFLOAT, 0); }
		public PathtermContext[] pathterm() {
			return GetRuleContexts<PathtermContext>();
		}
		public PathtermContext pathterm(int i) {
			return GetRuleContext<PathtermContext>(i);
		}
		public Appterm_timesContext(ApptermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppterm_times(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Appterm_iszeroContext : ApptermContext {
		public ITerminalNode ISZERO() { return GetToken(FullSimpleParser.ISZERO, 0); }
		public PathtermContext pathterm() {
			return GetRuleContext<PathtermContext>(0);
		}
		public Appterm_iszeroContext(ApptermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppterm_iszero(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Appterm_pathContext : ApptermContext {
		public PathtermContext pathterm() {
			return GetRuleContext<PathtermContext>(0);
		}
		public Appterm_pathContext(ApptermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppterm_path(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Appterm_app_pathContext : ApptermContext {
		public ApptermContext appterm() {
			return GetRuleContext<ApptermContext>(0);
		}
		public PathtermContext pathterm() {
			return GetRuleContext<PathtermContext>(0);
		}
		public Appterm_app_pathContext(ApptermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppterm_app_path(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Appterm_succContext : ApptermContext {
		public ITerminalNode SUCC() { return GetToken(FullSimpleParser.SUCC, 0); }
		public PathtermContext pathterm() {
			return GetRuleContext<PathtermContext>(0);
		}
		public Appterm_succContext(ApptermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppterm_succ(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Appterm_predContext : ApptermContext {
		public ITerminalNode PRED() { return GetToken(FullSimpleParser.PRED, 0); }
		public PathtermContext pathterm() {
			return GetRuleContext<PathtermContext>(0);
		}
		public Appterm_predContext(ApptermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppterm_pred(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Appterm_fixContext : ApptermContext {
		public ITerminalNode FIX() { return GetToken(FullSimpleParser.FIX, 0); }
		public PathtermContext pathterm() {
			return GetRuleContext<PathtermContext>(0);
		}
		public Appterm_fixContext(ApptermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppterm_fix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ApptermContext appterm() {
		return appterm(0);
	}

	private ApptermContext appterm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ApptermContext _localctx = new ApptermContext(Context, _parentState);
		ApptermContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_appterm, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INERT:
			case TRUE:
			case FALSE:
			case UNIT:
			case STRINGV:
			case LT:
			case LCURLY:
			case LPAREN:
			case FLOATV:
			case INTV:
			case LCID:
				{
				_localctx = new Appterm_pathContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 162; pathterm(0);
				}
				break;
			case FIX:
				{
				_localctx = new Appterm_fixContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 163; Match(FIX);
				State = 164; pathterm(0);
				}
				break;
			case TIMESFLOAT:
				{
				_localctx = new Appterm_timesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 165; Match(TIMESFLOAT);
				State = 166; pathterm(0);
				State = 167; pathterm(0);
				}
				break;
			case SUCC:
				{
				_localctx = new Appterm_succContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 169; Match(SUCC);
				State = 170; pathterm(0);
				}
				break;
			case PRED:
				{
				_localctx = new Appterm_predContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 171; Match(PRED);
				State = 172; pathterm(0);
				}
				break;
			case ISZERO:
				{
				_localctx = new Appterm_iszeroContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 173; Match(ISZERO);
				State = 174; pathterm(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 181;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Appterm_app_pathContext(new ApptermContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_appterm);
					State = 177;
					if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
					State = 178; pathterm(0);
					}
					} 
				}
				State = 183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AscribetermContext : ParserRuleContext {
		public AscribetermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascribeterm; } }
	 
		public AscribetermContext() { }
		public virtual void CopyFrom(AscribetermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Ascribeterm_aaaContext : AscribetermContext {
		public AtermContext aterm() {
			return GetRuleContext<AtermContext>(0);
		}
		public ITerminalNode AS() { return GetToken(FullSimpleParser.AS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Ascribeterm_aaaContext(AscribetermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAscribeterm_aaa(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Ascribeterm_aContext : AscribetermContext {
		public AtermContext aterm() {
			return GetRuleContext<AtermContext>(0);
		}
		public Ascribeterm_aContext(AscribetermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAscribeterm_a(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AscribetermContext ascribeterm() {
		AscribetermContext _localctx = new AscribetermContext(Context, State);
		EnterRule(_localctx, 24, RULE_ascribeterm);
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new Ascribeterm_aaaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 184; aterm();
				State = 185; Match(AS);
				State = 186; type();
				}
				break;
			case 2:
				_localctx = new Ascribeterm_aContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; aterm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathtermContext : ParserRuleContext {
		public PathtermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathterm; } }
	 
		public PathtermContext() { }
		public virtual void CopyFrom(PathtermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pathterm_intvContext : PathtermContext {
		public PathtermContext pathterm() {
			return GetRuleContext<PathtermContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(FullSimpleParser.DOT, 0); }
		public ITerminalNode INTV() { return GetToken(FullSimpleParser.INTV, 0); }
		public Pathterm_intvContext(PathtermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathterm_intv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pathterm_lcidContext : PathtermContext {
		public PathtermContext pathterm() {
			return GetRuleContext<PathtermContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(FullSimpleParser.DOT, 0); }
		public ITerminalNode LCID() { return GetToken(FullSimpleParser.LCID, 0); }
		public Pathterm_lcidContext(PathtermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathterm_lcid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pathterm_astermContext : PathtermContext {
		public AscribetermContext ascribeterm() {
			return GetRuleContext<AscribetermContext>(0);
		}
		public Pathterm_astermContext(PathtermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathterm_asterm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathtermContext pathterm() {
		return pathterm(0);
	}

	private PathtermContext pathterm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PathtermContext _localctx = new PathtermContext(Context, _parentState);
		PathtermContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_pathterm, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Pathterm_astermContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 192; ascribeterm();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 202;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 200;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new Pathterm_lcidContext(new PathtermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_pathterm);
						State = 194;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 195; Match(DOT);
						State = 196; Match(LCID);
						}
						break;
					case 2:
						{
						_localctx = new Pathterm_intvContext(new PathtermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_pathterm);
						State = 197;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 198; Match(DOT);
						State = 199; Match(INTV);
						}
						break;
					}
					} 
				}
				State = 204;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermseqContext : ParserRuleContext {
		public TermseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termseq; } }
	 
		public TermseqContext() { }
		public virtual void CopyFrom(TermseqContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Termseq_termContext : TermseqContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Termseq_termContext(TermseqContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermseq_term(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Termseq_termseqContext : TermseqContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(FullSimpleParser.SEMI, 0); }
		public TermseqContext termseq() {
			return GetRuleContext<TermseqContext>(0);
		}
		public Termseq_termseqContext(TermseqContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermseq_termseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermseqContext termseq() {
		TermseqContext _localctx = new TermseqContext(Context, State);
		EnterRule(_localctx, 28, RULE_termseq);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new Termseq_termContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 205; term();
				}
				break;
			case 2:
				_localctx = new Termseq_termseqContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 206; term();
				State = 207; Match(SEMI);
				State = 208; termseq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtermContext : ParserRuleContext {
		public AtermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aterm; } }
	 
		public AtermContext() { }
		public virtual void CopyFrom(AtermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Aterm_falseContext : AtermContext {
		public ITerminalNode FALSE() { return GetToken(FullSimpleParser.FALSE, 0); }
		public Aterm_falseContext(AtermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAterm_false(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Aterm_fieldsContext : AtermContext {
		public ITerminalNode LCURLY() { return GetToken(FullSimpleParser.LCURLY, 0); }
		public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public ITerminalNode RCURLY() { return GetToken(FullSimpleParser.RCURLY, 0); }
		public Aterm_fieldsContext(AtermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAterm_fields(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Aterm_inertContext : AtermContext {
		public ITerminalNode INERT() { return GetToken(FullSimpleParser.INERT, 0); }
		public ITerminalNode LSQUARE() { return GetToken(FullSimpleParser.LSQUARE, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RSQUARE() { return GetToken(FullSimpleParser.RSQUARE, 0); }
		public Aterm_inertContext(AtermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAterm_inert(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Aterm_unitContext : AtermContext {
		public ITerminalNode UNIT() { return GetToken(FullSimpleParser.UNIT, 0); }
		public Aterm_unitContext(AtermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAterm_unit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Aterm_trueContext : AtermContext {
		public ITerminalNode TRUE() { return GetToken(FullSimpleParser.TRUE, 0); }
		public Aterm_trueContext(AtermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAterm_true(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Aterm_lcidContext : AtermContext {
		public ITerminalNode LCID() { return GetToken(FullSimpleParser.LCID, 0); }
		public Aterm_lcidContext(AtermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAterm_lcid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Aterm_intvContext : AtermContext {
		public ITerminalNode INTV() { return GetToken(FullSimpleParser.INTV, 0); }
		public Aterm_intvContext(AtermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAterm_intv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Aterm_parenContext : AtermContext {
		public ITerminalNode LPAREN() { return GetToken(FullSimpleParser.LPAREN, 0); }
		public TermseqContext termseq() {
			return GetRuleContext<TermseqContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(FullSimpleParser.RPAREN, 0); }
		public Aterm_parenContext(AtermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAterm_paren(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Aterm_floatvContext : AtermContext {
		public ITerminalNode FLOATV() { return GetToken(FullSimpleParser.FLOATV, 0); }
		public Aterm_floatvContext(AtermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAterm_floatv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Aterm_ltContext : AtermContext {
		public ITerminalNode LT() { return GetToken(FullSimpleParser.LT, 0); }
		public ITerminalNode LCID() { return GetToken(FullSimpleParser.LCID, 0); }
		public ITerminalNode EQ() { return GetToken(FullSimpleParser.EQ, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode GT() { return GetToken(FullSimpleParser.GT, 0); }
		public ITerminalNode AS() { return GetToken(FullSimpleParser.AS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Aterm_ltContext(AtermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAterm_lt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Aterm_stringvContext : AtermContext {
		public ITerminalNode STRINGV() { return GetToken(FullSimpleParser.STRINGV, 0); }
		public Aterm_stringvContext(AtermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAterm_stringv(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtermContext aterm() {
		AtermContext _localctx = new AtermContext(Context, State);
		EnterRule(_localctx, 30, RULE_aterm);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				_localctx = new Aterm_parenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 212; Match(LPAREN);
				State = 213; termseq();
				State = 214; Match(RPAREN);
				}
				break;
			case INERT:
				_localctx = new Aterm_inertContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 216; Match(INERT);
				State = 217; Match(LSQUARE);
				State = 218; type();
				State = 219; Match(RSQUARE);
				}
				break;
			case TRUE:
				_localctx = new Aterm_trueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 221; Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new Aterm_falseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 222; Match(FALSE);
				}
				break;
			case LT:
				_localctx = new Aterm_ltContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 223; Match(LT);
				State = 224; Match(LCID);
				State = 225; Match(EQ);
				State = 226; term();
				State = 227; Match(GT);
				State = 228; Match(AS);
				State = 229; type();
				}
				break;
			case LCID:
				_localctx = new Aterm_lcidContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 231; Match(LCID);
				}
				break;
			case STRINGV:
				_localctx = new Aterm_stringvContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 232; Match(STRINGV);
				}
				break;
			case UNIT:
				_localctx = new Aterm_unitContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 233; Match(UNIT);
				}
				break;
			case LCURLY:
				_localctx = new Aterm_fieldsContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 234; Match(LCURLY);
				State = 235; fields();
				State = 236; Match(RCURLY);
				}
				break;
			case FLOATV:
				_localctx = new Aterm_floatvContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 238; Match(FLOATV);
				}
				break;
			case INTV:
				_localctx = new Aterm_intvContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 239; Match(INTV);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CasesContext : ParserRuleContext {
		public CasesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cases; } }
	 
		public CasesContext() { }
		public virtual void CopyFrom(CasesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Cases_case_vbar_casesContext : CasesContext {
		public CaseContext @case() {
			return GetRuleContext<CaseContext>(0);
		}
		public ITerminalNode VBAR() { return GetToken(FullSimpleParser.VBAR, 0); }
		public CasesContext cases() {
			return GetRuleContext<CasesContext>(0);
		}
		public Cases_case_vbar_casesContext(CasesContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCases_case_vbar_cases(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Cases_caseContext : CasesContext {
		public CaseContext @case() {
			return GetRuleContext<CaseContext>(0);
		}
		public Cases_caseContext(CasesContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCases_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CasesContext cases() {
		CasesContext _localctx = new CasesContext(Context, State);
		EnterRule(_localctx, 32, RULE_cases);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new Cases_caseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 242; @case();
				}
				break;
			case 2:
				_localctx = new Cases_case_vbar_casesContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 243; @case();
				State = 244; Match(VBAR);
				State = 245; cases();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(FullSimpleParser.LT, 0); }
		public ITerminalNode[] LCID() { return GetTokens(FullSimpleParser.LCID); }
		public ITerminalNode LCID(int i) {
			return GetToken(FullSimpleParser.LCID, i);
		}
		public ITerminalNode EQ() { return GetToken(FullSimpleParser.EQ, 0); }
		public ITerminalNode GT() { return GetToken(FullSimpleParser.GT, 0); }
		public ITerminalNode DDARROW() { return GetToken(FullSimpleParser.DDARROW, 0); }
		public ApptermContext appterm() {
			return GetRuleContext<ApptermContext>(0);
		}
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 34, RULE_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(LT);
			State = 250; Match(LCID);
			State = 251; Match(EQ);
			State = 252; Match(LCID);
			State = 253; Match(GT);
			State = 254; Match(DDARROW);
			State = 255; appterm(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public NefieldsContext nefields() {
			return GetRuleContext<NefieldsContext>(0);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 36, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (INERT - 2)) | (1L << (IF - 2)) | (1L << (TRUE - 2)) | (1L << (FALSE - 2)) | (1L << (CASE - 2)) | (1L << (LAMBDA - 2)) | (1L << (LET - 2)) | (1L << (FIX - 2)) | (1L << (LETREC - 2)) | (1L << (UNIT - 2)) | (1L << (TIMESFLOAT - 2)) | (1L << (SUCC - 2)) | (1L << (PRED - 2)) | (1L << (ISZERO - 2)) | (1L << (STRINGV - 2)) | (1L << (LT - 2)) | (1L << (LCURLY - 2)) | (1L << (LPAREN - 2)) | (1L << (FLOATV - 2)) | (1L << (INTV - 2)) | (1L << (LCID - 2)))) != 0)) {
				{
				State = 257; nefields();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NefieldsContext : ParserRuleContext {
		public NefieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nefields; } }
	 
		public NefieldsContext() { }
		public virtual void CopyFrom(NefieldsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Nefields_fieldContext : NefieldsContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public Nefields_fieldContext(NefieldsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNefields_field(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Nefields_field_comma_nefieldsContext : NefieldsContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(FullSimpleParser.COMMA, 0); }
		public NefieldsContext nefields() {
			return GetRuleContext<NefieldsContext>(0);
		}
		public Nefields_field_comma_nefieldsContext(NefieldsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNefields_field_comma_nefields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NefieldsContext nefields() {
		NefieldsContext _localctx = new NefieldsContext(Context, State);
		EnterRule(_localctx, 38, RULE_nefields);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new Nefields_fieldContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 260; field();
				}
				break;
			case 2:
				_localctx = new Nefields_field_comma_nefieldsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 261; field();
				State = 262; Match(COMMA);
				State = 263; nefields();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
	 
		public FieldContext() { }
		public virtual void CopyFrom(FieldContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Field_termContext : FieldContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Field_termContext(FieldContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_term(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Field_lcidContext : FieldContext {
		public ITerminalNode LCID() { return GetToken(FullSimpleParser.LCID, 0); }
		public ITerminalNode EQ() { return GetToken(FullSimpleParser.EQ, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Field_lcidContext(FieldContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFullSimpleVisitor<TResult> typedVisitor = visitor as IFullSimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_lcid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 40, RULE_field);
		try {
			State = 271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new Field_lcidContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 267; Match(LCID);
				State = 268; Match(EQ);
				State = 269; term();
				}
				break;
			case 2:
				_localctx = new Field_termContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 270; term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return appterm_sempred((ApptermContext)_localctx, predIndex);
		case 13: return pathterm_sempred((PathtermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool appterm_sempred(ApptermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		}
		return true;
	}
	private bool pathterm_sempred(PathtermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x45', '\x114', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x32', '\n', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x39', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '?', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'U', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x61', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', 'g', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', 'n', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xA2', '\n', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xB2', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xB6', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\xB9', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xC0', '\n', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xCB', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xCE', '\v', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xD5', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\xF3', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xFA', '\n', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x5', '\x14', '\x105', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\x10C', '\n', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x112', '\n', '\x16', 
		'\x3', '\x16', '\x2', '\x4', '\x18', '\x1C', '\x17', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', '\x2', '\x2', '\x2', '\x12C', 
		'\x2', '\x31', '\x3', '\x2', '\x2', '\x2', '\x4', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '>', '\x3', '\x2', '\x2', '\x2', '\b', '@', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'T', '\x3', '\x2', '\x2', '\x2', '\f', 'V', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'Y', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x12', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'm', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\xD4', '\x3', '\x2', '\x2', '\x2', ' ', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\xF9', '\x3', '\x2', '\x2', '\x2', '$', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x10B', '\x3', '\x2', '\x2', '\x2', '*', '\x111', '\x3', '\x2', 
		'\x2', '\x2', ',', '-', '\x5', '\x4', '\x3', '\x2', '-', '.', '\a', '&', 
		'\x2', '\x2', '.', '/', '\x5', '\x2', '\x2', '\x2', '/', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x32', '\a', '\x2', '\x2', '\x3', '\x31', 
		',', '\x3', '\x2', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x3', '\x3', '\x2', '\x2', '\x2', '\x33', '\x39', '\x5', 
		'\x16', '\f', '\x2', '\x34', '\x35', '\a', '\x41', '\x2', '\x2', '\x35', 
		'\x39', '\x5', '\f', '\a', '\x2', '\x36', '\x37', '\a', '\x42', '\x2', 
		'\x2', '\x37', '\x39', '\x5', '\x6', '\x4', '\x2', '\x38', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x34', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x39', '\x5', '\x3', '\x2', '\x2', 
		'\x2', ':', ';', '\a', ')', '\x2', '\x2', ';', '?', '\x5', '\b', '\x5', 
		'\x2', '<', '=', '\a', '+', '\x2', '\x2', '=', '?', '\x5', '\x16', '\f', 
		'\x2', '>', ':', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', 
		'\x2', '?', '\a', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x5', '\x14', 
		'\v', '\x2', '\x41', '\t', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\a', '\x30', '\x2', '\x2', '\x43', '\x44', '\x5', '\b', '\x5', '\x2', 
		'\x44', '\x45', '\a', '\x35', '\x2', '\x2', '\x45', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'U', '\a', '\x41', '\x2', '\x2', 'G', 'U', '\a', 
		'\n', '\x2', '\x2', 'H', 'I', '\a', '.', '\x2', '\x2', 'I', 'J', '\x5', 
		'\xE', '\b', '\x2', 'J', 'K', '\a', '\x37', '\x2', '\x2', 'K', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'U', '\a', '\x13', '\x2', '\x2', 'M', 'U', '\a', 
		'\x15', '\x2', '\x2', 'N', 'O', '\a', '/', '\x2', '\x2', 'O', 'P', '\x5', 
		'\xE', '\b', '\x2', 'P', 'Q', '\a', '\x34', '\x2', '\x2', 'Q', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'U', '\a', '\x17', '\x2', '\x2', 'S', 'U', '\a', 
		'\x1B', '\x2', '\x2', 'T', '\x42', '\x3', '\x2', '\x2', '\x2', 'T', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'T', 'G', '\x3', '\x2', '\x2', '\x2', 'T', 
		'H', '\x3', '\x2', '\x2', '\x2', 'T', 'L', '\x3', '\x2', '\x2', '\x2', 
		'T', 'M', '\x3', '\x2', '\x2', '\x2', 'T', 'N', '\x3', '\x2', '\x2', '\x2', 
		'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'S', '\x3', '\x2', '\x2', '\x2', 
		'U', '\v', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '+', '\x2', '\x2', 
		'W', 'X', '\x5', '\b', '\x5', '\x2', 'X', '\r', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'Z', '\x5', '\x10', '\t', '\x2', 'Z', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '[', '\x61', '\x5', '\x12', '\n', '\x2', '\\', ']', '\x5', '\x12', 
		'\n', '\x2', ']', '^', '\a', '\'', '\x2', '\x2', '^', '_', '\x5', '\x10', 
		'\t', '\x2', '_', '\x61', '\x3', '\x2', '\x2', '\x2', '`', '[', '\x3', 
		'\x2', '\x2', '\x2', '`', '\\', '\x3', '\x2', '\x2', '\x2', '\x61', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\a', '\x42', '\x2', '\x2', 
		'\x63', '\x64', '\a', ')', '\x2', '\x2', '\x64', 'g', '\x5', '\b', '\x5', 
		'\x2', '\x65', 'g', '\x5', '\b', '\x5', '\x2', '\x66', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 
		'\x13', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x5', '\n', '\x6', '\x2', 
		'i', 'j', '\a', '<', '\x2', '\x2', 'j', 'k', '\x5', '\x14', '\v', '\x2', 
		'k', 'n', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\x5', '\n', '\x6', '\x2', 
		'm', 'h', '\x3', '\x2', '\x2', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x15', '\x3', '\x2', '\x2', '\x2', 'o', '\xA2', '\x5', '\x18', '\r', 
		'\x2', 'p', 'q', '\a', '\x5', '\x2', '\x2', 'q', 'r', '\x5', '\x16', '\f', 
		'\x2', 'r', 's', '\a', '\x6', '\x2', '\x2', 's', 't', '\x5', '\x16', '\f', 
		'\x2', 't', 'u', '\a', '\a', '\x2', '\x2', 'u', 'v', '\x5', '\x16', '\f', 
		'\x2', 'v', '\xA2', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '\v', 
		'\x2', '\x2', 'x', 'y', '\x5', '\x16', '\f', '\x2', 'y', 'z', '\a', '\f', 
		'\x2', '\x2', 'z', '{', '\x5', '\"', '\x12', '\x2', '{', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\a', '\xE', '\x2', '\x2', '}', '~', '\a', 
		'\x42', '\x2', '\x2', '~', '\x7F', '\a', ')', '\x2', '\x2', '\x7F', '\x80', 
		'\x5', '\b', '\x5', '\x2', '\x80', '\x81', '\a', '%', '\x2', '\x2', '\x81', 
		'\x82', '\x5', '\x16', '\f', '\x2', '\x82', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\a', '\xE', '\x2', '\x2', '\x84', '\x85', '\a', 
		'\x1D', '\x2', '\x2', '\x85', '\x86', '\a', ')', '\x2', '\x2', '\x86', 
		'\x87', '\x5', '\b', '\x5', '\x2', '\x87', '\x88', '\a', '%', '\x2', '\x2', 
		'\x88', '\x89', '\x5', '\x16', '\f', '\x2', '\x89', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8B', '\a', '\xF', '\x2', '\x2', '\x8B', '\x8C', 
		'\a', '\x42', '\x2', '\x2', '\x8C', '\x8D', '\a', '+', '\x2', '\x2', '\x8D', 
		'\x8E', '\x5', '\x16', '\f', '\x2', '\x8E', '\x8F', '\a', '\x10', '\x2', 
		'\x2', '\x8F', '\x90', '\x5', '\x16', '\f', '\x2', '\x90', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\a', '\xF', '\x2', '\x2', '\x92', 
		'\x93', '\a', '\x1D', '\x2', '\x2', '\x93', '\x94', '\a', '+', '\x2', 
		'\x2', '\x94', '\x95', '\x5', '\x16', '\f', '\x2', '\x95', '\x96', '\a', 
		'\x10', '\x2', '\x2', '\x96', '\x97', '\x5', '\x16', '\f', '\x2', '\x97', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\x12', '\x2', 
		'\x2', '\x99', '\x9A', '\a', '\x42', '\x2', '\x2', '\x9A', '\x9B', '\a', 
		')', '\x2', '\x2', '\x9B', '\x9C', '\x5', '\b', '\x5', '\x2', '\x9C', 
		'\x9D', '\a', '+', '\x2', '\x2', '\x9D', '\x9E', '\x5', '\x16', '\f', 
		'\x2', '\x9E', '\x9F', '\a', '\x10', '\x2', '\x2', '\x9F', '\xA0', '\x5', 
		'\x16', '\f', '\x2', '\xA0', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'o', '\x3', '\x2', '\x2', '\x2', '\xA1', 'p', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', 'w', '\x3', '\x2', '\x2', '\x2', '\xA1', '|', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\x83', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\x91', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA4', '\b', '\r', '\x1', '\x2', '\xA4', '\xB2', '\x5', 
		'\x1C', '\xF', '\x2', '\xA5', '\xA6', '\a', '\x11', '\x2', '\x2', '\xA6', 
		'\xB2', '\x5', '\x1C', '\xF', '\x2', '\xA7', '\xA8', '\a', '\x16', '\x2', 
		'\x2', '\xA8', '\xA9', '\x5', '\x1C', '\xF', '\x2', '\xA9', '\xAA', '\x5', 
		'\x1C', '\xF', '\x2', '\xAA', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAC', '\a', '\x18', '\x2', '\x2', '\xAC', '\xB2', '\x5', '\x1C', '\xF', 
		'\x2', '\xAD', '\xAE', '\a', '\x19', '\x2', '\x2', '\xAE', '\xB2', '\x5', 
		'\x1C', '\xF', '\x2', '\xAF', '\xB0', '\a', '\x1A', '\x2', '\x2', '\xB0', 
		'\xB2', '\x5', '\x1C', '\xF', '\x2', '\xB1', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\f', 
		'\b', '\x2', '\x2', '\xB4', '\xB6', '\x5', '\x1C', '\xF', '\x2', '\xB5', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x5', ' ', '\x11', 
		'\x2', '\xBB', '\xBC', '\a', '\r', '\x2', '\x2', '\xBC', '\xBD', '\x5', 
		'\b', '\x5', '\x2', '\xBD', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xC0', '\x5', ' ', '\x11', '\x2', '\xBF', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC2', '\b', '\xF', '\x1', '\x2', '\xC2', 
		'\xC3', '\x5', '\x1A', '\xE', '\x2', '\xC3', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC5', '\f', '\x5', '\x2', '\x2', '\xC5', '\xC6', '\a', 
		'%', '\x2', '\x2', '\xC6', '\xCB', '\a', '\x42', '\x2', '\x2', '\xC7', 
		'\xC8', '\f', '\x4', '\x2', '\x2', '\xC8', '\xC9', '\a', '%', '\x2', '\x2', 
		'\xC9', '\xCB', '\a', '@', '\x2', '\x2', '\xCA', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD5', 
		'\x5', '\x16', '\f', '\x2', '\xD0', '\xD1', '\x5', '\x16', '\f', '\x2', 
		'\xD1', '\xD2', '\a', '&', '\x2', '\x2', '\xD2', '\xD3', '\x5', '\x1E', 
		'\x10', '\x2', '\xD3', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xD0', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x30', 
		'\x2', '\x2', '\xD7', '\xD8', '\x5', '\x1E', '\x10', '\x2', '\xD8', '\xD9', 
		'\a', '\x35', '\x2', '\x2', '\xD9', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xDB', '\a', '\x4', '\x2', '\x2', '\xDB', '\xDC', '\a', '-', 
		'\x2', '\x2', '\xDC', '\xDD', '\x5', '\b', '\x5', '\x2', '\xDD', '\xDE', 
		'\a', '\x36', '\x2', '\x2', '\xDE', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xF3', '\a', '\b', '\x2', '\x2', '\xE0', '\xF3', '\a', '\t', 
		'\x2', '\x2', '\xE1', '\xE2', '\a', '.', '\x2', '\x2', '\xE2', '\xE3', 
		'\a', '\x42', '\x2', '\x2', '\xE3', '\xE4', '\a', '+', '\x2', '\x2', '\xE4', 
		'\xE5', '\x5', '\x16', '\f', '\x2', '\xE5', '\xE6', '\a', '\x37', '\x2', 
		'\x2', '\xE6', '\xE7', '\a', '\r', '\x2', '\x2', '\xE7', '\xE8', '\x5', 
		'\b', '\x5', '\x2', '\xE8', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xF3', '\a', '\x42', '\x2', '\x2', '\xEA', '\xF3', '\a', '\x1C', '\x2', 
		'\x2', '\xEB', '\xF3', '\a', '\x14', '\x2', '\x2', '\xEC', '\xED', '\a', 
		'/', '\x2', '\x2', '\xED', '\xEE', '\x5', '&', '\x14', '\x2', '\xEE', 
		'\xEF', '\a', '\x34', '\x2', '\x2', '\xEF', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF3', '\a', '?', '\x2', '\x2', '\xF1', '\xF3', '\a', 
		'@', '\x2', '\x2', '\xF2', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xFA', '\x5', '$', '\x13', '\x2', 
		'\xF5', '\xF6', '\x5', '$', '\x13', '\x2', '\xF6', '\xF7', '\a', '$', 
		'\x2', '\x2', '\xF7', '\xF8', '\x5', '\"', '\x12', '\x2', '\xF8', '\xFA', 
		'\x3', '\x2', '\x2', '\x2', '\xF9', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xFA', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xFB', '\xFC', '\a', '.', '\x2', '\x2', '\xFC', '\xFD', 
		'\a', '\x42', '\x2', '\x2', '\xFD', '\xFE', '\a', '+', '\x2', '\x2', '\xFE', 
		'\xFF', '\a', '\x42', '\x2', '\x2', '\xFF', '\x100', '\a', '\x37', '\x2', 
		'\x2', '\x100', '\x101', '\a', '>', '\x2', '\x2', '\x101', '\x102', '\x5', 
		'\x18', '\r', '\x2', '\x102', '%', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x105', '\x5', '(', '\x15', '\x2', '\x104', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x10C', '\x5', '*', '\x16', '\x2', '\x107', 
		'\x108', '\x5', '*', '\x16', '\x2', '\x108', '\x109', '\a', '\'', '\x2', 
		'\x2', '\x109', '\x10A', '\x5', '(', '\x15', '\x2', '\x10A', '\x10C', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10C', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x10D', '\x10E', '\a', '\x42', '\x2', '\x2', '\x10E', '\x10F', 
		'\a', '+', '\x2', '\x2', '\x10F', '\x112', '\x5', '\x16', '\f', '\x2', 
		'\x110', '\x112', '\x5', '\x16', '\f', '\x2', '\x111', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x110', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x15', '\x31', '\x38', '>', 'T', '`', 
		'\x66', 'm', '\xA1', '\xB1', '\xB7', '\xBF', '\xCA', '\xCC', '\xD4', '\xF2', 
		'\xF9', '\x104', '\x10B', '\x111',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
