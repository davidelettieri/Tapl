//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Tapl.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="TaplParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface ITaplListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>par</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPar([NotNull] TaplParser.ParContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>par</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPar([NotNull] TaplParser.ParContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfThenElse</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfThenElse([NotNull] TaplParser.IfThenElseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfThenElse</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfThenElse([NotNull] TaplParser.IfThenElseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Succ</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSucc([NotNull] TaplParser.SuccContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Succ</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSucc([NotNull] TaplParser.SuccContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Pred</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPred([NotNull] TaplParser.PredContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Pred</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPred([NotNull] TaplParser.PredContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsZero</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsZero([NotNull] TaplParser.IsZeroContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsZero</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsZero([NotNull] TaplParser.IsZeroContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>True</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTrue([NotNull] TaplParser.TrueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>True</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTrue([NotNull] TaplParser.TrueContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>False</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFalse([NotNull] TaplParser.FalseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>False</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFalse([NotNull] TaplParser.FalseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Zero</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterZero([NotNull] TaplParser.ZeroContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Zero</c>
	/// labeled alternative in <see cref="TaplParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitZero([NotNull] TaplParser.ZeroContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numericvalue</c>
	/// labeled alternative in <see cref="TaplParser.v"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumericvalue([NotNull] TaplParser.NumericvalueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numericvalue</c>
	/// labeled alternative in <see cref="TaplParser.v"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumericvalue([NotNull] TaplParser.NumericvalueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TaplParser.nv"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNv([NotNull] TaplParser.NvContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TaplParser.nv"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNv([NotNull] TaplParser.NvContext context);
}
