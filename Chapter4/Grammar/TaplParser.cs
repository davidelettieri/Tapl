//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Tapl.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class TaplParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ZERO=1, SUCC=2, PRED=3, ISZERO=4, TRUE=5, FALSE=6, IF=7, THEN=8, ELSE=9, 
		WS=10;
	public const int
		RULE_term = 0, RULE_v = 1, RULE_nv = 2;
	public static readonly string[] ruleNames = {
		"term", "v", "nv"
	};

	private static readonly string[] _LiteralNames = {
		null, "'0'", "'succ'", "'pred'", "'iszero'", "'true'", "'false'", "'if'", 
		"'then'", "'else'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ZERO", "SUCC", "PRED", "ISZERO", "TRUE", "FALSE", "IF", "THEN", 
		"ELSE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tapl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TaplParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TaplParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TaplParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsZeroContext : TermContext {
		public ITerminalNode ISZERO() { return GetToken(TaplParser.ISZERO, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public IsZeroContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.EnterIsZero(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.ExitIsZero(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsZero(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ZeroContext : TermContext {
		public ITerminalNode ZERO() { return GetToken(TaplParser.ZERO, 0); }
		public ZeroContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.EnterZero(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.ExitZero(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZero(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuccContext : TermContext {
		public ITerminalNode SUCC() { return GetToken(TaplParser.SUCC, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public SuccContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.EnterSucc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.ExitSucc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSucc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredContext : TermContext {
		public ITerminalNode PRED() { return GetToken(TaplParser.PRED, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public PredContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.EnterPred(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.ExitPred(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPred(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueContext : TermContext {
		public ITerminalNode TRUE() { return GetToken(TaplParser.TRUE, 0); }
		public TrueContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.EnterTrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.ExitTrue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfThenElseContext : TermContext {
		public ITerminalNode IF() { return GetToken(TaplParser.IF, 0); }
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(TaplParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(TaplParser.ELSE, 0); }
		public IfThenElseContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.EnterIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.ExitIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseContext : TermContext {
		public ITerminalNode FALSE() { return GetToken(TaplParser.FALSE, 0); }
		public FalseContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.EnterFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.ExitFalse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 0, RULE_term);
		try {
			State = 22;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				_localctx = new IfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6; Match(IF);
				State = 7; term();
				State = 8; Match(THEN);
				State = 9; term();
				State = 10; Match(ELSE);
				State = 11; term();
				}
				break;
			case SUCC:
				_localctx = new SuccContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 13; Match(SUCC);
				State = 14; term();
				}
				break;
			case PRED:
				_localctx = new PredContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 15; Match(PRED);
				State = 16; term();
				}
				break;
			case ISZERO:
				_localctx = new IsZeroContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 17; Match(ISZERO);
				State = 18; term();
				}
				break;
			case TRUE:
				_localctx = new TrueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 19; Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new FalseContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 20; Match(FALSE);
				}
				break;
			case ZERO:
				_localctx = new ZeroContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 21; Match(ZERO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VContext : ParserRuleContext {
		public VContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_v; } }
	 
		public VContext() { }
		public virtual void CopyFrom(VContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumericvalueContext : VContext {
		public NvContext nv() {
			return GetRuleContext<NvContext>(0);
		}
		public NumericvalueContext(VContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.EnterNumericvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.ExitNumericvalue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VContext v() {
		VContext _localctx = new VContext(Context, State);
		EnterRule(_localctx, 2, RULE_v);
		try {
			_localctx = new NumericvalueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; nv();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NvContext : ParserRuleContext {
		public ITerminalNode SUCC() { return GetToken(TaplParser.SUCC, 0); }
		public NvContext nv() {
			return GetRuleContext<NvContext>(0);
		}
		public ITerminalNode ZERO() { return GetToken(TaplParser.ZERO, 0); }
		public NvContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nv; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.EnterNv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITaplListener typedListener = listener as ITaplListener;
			if (typedListener != null) typedListener.ExitNv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNv(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NvContext nv() {
		NvContext _localctx = new NvContext(Context, State);
		EnterRule(_localctx, 4, RULE_nv);
		try {
			State = 29;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUCC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26; Match(SUCC);
				State = 27; nv();
				}
				break;
			case ZERO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 28; Match(ZERO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', '\"', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x19', 
		'\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', ' ', '\n', '\x4', '\x3', '\x4', '\x2', '\x2', '\x5', 
		'\x2', '\x4', '\x6', '\x2', '\x2', '\x2', '%', '\x2', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\t', '\a', '\t', '\x2', '\x2', '\t', 
		'\n', '\x5', '\x2', '\x2', '\x2', '\n', '\v', '\a', '\n', '\x2', '\x2', 
		'\v', '\f', '\x5', '\x2', '\x2', '\x2', '\f', '\r', '\a', '\v', '\x2', 
		'\x2', '\r', '\xE', '\x5', '\x2', '\x2', '\x2', '\xE', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x10', '\a', '\x4', '\x2', '\x2', '\x10', 
		'\x19', '\x5', '\x2', '\x2', '\x2', '\x11', '\x12', '\a', '\x5', '\x2', 
		'\x2', '\x12', '\x19', '\x5', '\x2', '\x2', '\x2', '\x13', '\x14', '\a', 
		'\x6', '\x2', '\x2', '\x14', '\x19', '\x5', '\x2', '\x2', '\x2', '\x15', 
		'\x19', '\a', '\a', '\x2', '\x2', '\x16', '\x19', '\a', '\b', '\x2', '\x2', 
		'\x17', '\x19', '\a', '\x3', '\x2', '\x2', '\x18', '\b', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xF', '\x3', '\x2', '\x2', '\x2', '\x18', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x15', '\x3', '\x2', '\x2', '\x2', '\x18', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x5', '\x6', '\x4', '\x2', 
		'\x1B', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '\x4', 
		'\x2', '\x2', '\x1D', ' ', '\x5', '\x6', '\x4', '\x2', '\x1E', ' ', '\a', 
		'\x3', '\x2', '\x2', '\x1F', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x18', '\x1F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
