//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Tapl.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class TaplParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, BIND=12, VAR=13, LAMBDA=14, DOT=15, WS=16, NL=17, NL1=18;
	public const int
		RULE_toplevel = 0, RULE_command = 1, RULE_bind = 2, RULE_term = 3, RULE_type = 4;
	public static readonly string[] ruleNames = {
		"toplevel", "command", "bind", "term", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'('", "')'", "'if'", "'then'", "'else'", "'true'", "'false'", 
		"':'", "'->'", "'Bool'", "'BIND'", null, "'\\'", "'.'", "' '", "'\r'", 
		"'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"BIND", "VAR", "LAMBDA", "DOT", "WS", "NL", "NL1"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tapl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TaplParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TaplParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TaplParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ToplevelContext : ParserRuleContext {
		public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public ToplevelContext toplevel() {
			return GetRuleContext<ToplevelContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(TaplParser.Eof, 0); }
		public ToplevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toplevel; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToplevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToplevelContext toplevel() {
		ToplevelContext _localctx = new ToplevelContext(Context, State);
		EnterRule(_localctx, 0, RULE_toplevel);
		try {
			State = 15;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__3:
			case T__6:
			case T__7:
			case BIND:
			case VAR:
			case LAMBDA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10; command();
				State = 11; Match(T__0);
				State = 12; toplevel();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public BindContext bind() {
			return GetRuleContext<BindContext>(0);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 2, RULE_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIND:
				{
				State = 17; bind();
				}
				break;
			case T__1:
			case T__3:
			case T__6:
			case T__7:
			case VAR:
			case LAMBDA:
				{
				State = 18; term(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindContext : ParserRuleContext {
		public ITerminalNode BIND() { return GetToken(TaplParser.BIND, 0); }
		public ITerminalNode VAR() { return GetToken(TaplParser.VAR, 0); }
		public BindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindContext bind() {
		BindContext _localctx = new BindContext(Context, State);
		EnterRule(_localctx, 4, RULE_bind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21; Match(BIND);
			State = 22; Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParContext : TermContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ParContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AppContext : TermContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public AppContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbsContext : TermContext {
		public ITerminalNode LAMBDA() { return GetToken(TaplParser.LAMBDA, 0); }
		public ITerminalNode VAR() { return GetToken(TaplParser.VAR, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TaplParser.DOT, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public AbsContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarContext : TermContext {
		public ITerminalNode VAR() { return GetToken(TaplParser.VAR, 0); }
		public VarContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IftContext : TermContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public IftContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIft(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueContext : TermContext {
		public TrueContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseContext : TermContext {
		public FalseContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				_localctx = new ParContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 25; Match(T__1);
				State = 26; term(0);
				State = 27; Match(T__2);
				}
				break;
			case VAR:
				{
				_localctx = new VarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 29; Match(VAR);
				}
				break;
			case T__3:
				{
				_localctx = new IftContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 30; Match(T__3);
				State = 31; term(0);
				State = 32; Match(T__4);
				State = 33; term(0);
				State = 34; Match(T__5);
				State = 35; term(4);
				}
				break;
			case T__6:
				{
				_localctx = new TrueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37; Match(T__6);
				}
				break;
			case T__7:
				{
				_localctx = new FalseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 38; Match(T__7);
				}
				break;
			case LAMBDA:
				{
				_localctx = new AbsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 39; Match(LAMBDA);
				State = 40; Match(VAR);
				State = 41; Match(T__8);
				State = 42; type(0);
				State = 43; Match(DOT);
				State = 44; term(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 52;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AppContext(new TermContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 48;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 49; term(6);
					}
					} 
				}
				State = 54;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolContext : TypeContext {
		public BoolContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrowContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ArrowContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITaplVisitor<TResult> typedVisitor = visitor as ITaplVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BoolContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 56; Match(T__10);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 63;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArrowContext(new TypeContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 58;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 59; Match(T__9);
					State = 60; type(3);
					}
					} 
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return term_sempred((TermContext)_localctx, predIndex);
		case 4: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x14', '\x45', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '\x12', '\n', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x16', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x31', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x35', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', '\x38', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '@', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x43', '\v', '\x6', '\x3', '\x6', 
		'\x2', '\x4', '\b', '\n', '\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', 
		'\x2', '\x2', 'H', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x4', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x30', '\x3', '\x2', '\x2', '\x2', '\n', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\r', '\x5', '\x4', '\x3', '\x2', '\r', '\xE', '\a', 
		'\x3', '\x2', '\x2', '\xE', '\xF', '\x5', '\x2', '\x2', '\x2', '\xF', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x10', '\x12', '\a', '\x2', '\x2', 
		'\x3', '\x11', '\f', '\x3', '\x2', '\x2', '\x2', '\x11', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x3', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x16', '\x5', '\x6', '\x4', '\x2', '\x14', '\x16', '\x5', '\b', '\x5', 
		'\x2', '\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x15', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x5', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\a', '\xE', '\x2', '\x2', '\x18', '\x19', '\a', '\xF', '\x2', 
		'\x2', '\x19', '\a', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\b', 
		'\x5', '\x1', '\x2', '\x1B', '\x1C', '\a', '\x4', '\x2', '\x2', '\x1C', 
		'\x1D', '\x5', '\b', '\x5', '\x2', '\x1D', '\x1E', '\a', '\x5', '\x2', 
		'\x2', '\x1E', '\x31', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x31', '\a', 
		'\xF', '\x2', '\x2', ' ', '!', '\a', '\x6', '\x2', '\x2', '!', '\"', '\x5', 
		'\b', '\x5', '\x2', '\"', '#', '\a', '\a', '\x2', '\x2', '#', '$', '\x5', 
		'\b', '\x5', '\x2', '$', '%', '\a', '\b', '\x2', '\x2', '%', '&', '\x5', 
		'\b', '\x5', '\x6', '&', '\x31', '\x3', '\x2', '\x2', '\x2', '\'', '\x31', 
		'\a', '\t', '\x2', '\x2', '(', '\x31', '\a', '\n', '\x2', '\x2', ')', 
		'*', '\a', '\x10', '\x2', '\x2', '*', '+', '\a', '\xF', '\x2', '\x2', 
		'+', ',', '\a', '\v', '\x2', '\x2', ',', '-', '\x5', '\n', '\x6', '\x2', 
		'-', '.', '\a', '\x11', '\x2', '\x2', '.', '/', '\x5', '\b', '\x5', '\x3', 
		'/', '\x31', '\x3', '\x2', '\x2', '\x2', '\x30', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x30', ' ', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '(', '\x3', '\x2', '\x2', '\x2', '\x30', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x36', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\f', 
		'\a', '\x2', '\x2', '\x33', '\x35', '\x5', '\b', '\x5', '\b', '\x34', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\t', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\b', '\x6', '\x1', '\x2', 
		':', ';', '\a', '\r', '\x2', '\x2', ';', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\f', '\x4', '\x2', '\x2', '=', '>', '\a', '\f', '\x2', 
		'\x2', '>', '@', '\x5', '\n', '\x6', '\x5', '?', '<', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\a', '\x11', '\x15', '\x30', '\x36', '\x41',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
